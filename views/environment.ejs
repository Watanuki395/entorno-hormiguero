<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Entorno</title>
  <style>
    body {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      background: linear-gradient(135deg, #e2e0d5d7 0%, #a6a295d7 25%, #b2954cd7 50%, #9e8034d7 75%, #5a440c8e 100%);
      background-size: 200% 200%;
      animation: gradientAnimation 10s infinite;
    }
    @keyframes gradientAnimation {
      0%, 100% {
        background-position: 0% 50%;
      }
      25% {
        background-position: 50% 0%;
      }
      75% {
        background-position: 50% 100%;
      }
    }
    canvas {
      border: 2px solid black;
    }
    .form-colunm{
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }
      /* Estilos para el spinner de carga */
    .spinner-border {
      display: inline-block;
      width: 2rem;
      height: 2rem;
      vertical-align: text-bottom;
      border: .25em solid currentColor;
      border-right: .25em solid transparent;
      border-radius: 50%;
      -webkit-animation: spinner-border .75s linear infinite;
      animation: spinner-border .75s linear infinite;
    }

    @keyframes spinner-border {
      to {
        transform: rotate(360deg);
      }
    }

    .visually-hidden {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border: 0;
    }
    #loadingSpinner {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: rgba(155, 143, 143, 0.36);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
  }
  </style>
</head>
<body>
  <div class="container">
    <h1 class="display-4 text-center mb-4">Entorno del Hormiguero</h1>

    <!-- Formulario con estilos de Bootstrap -->
    <form id="createEnvironmentForm">
      <div class="form-colunm">
        <div class="form-group col-md-4">
          <label for="eMode">Modo:</label>
          <select id="eMode" name="eMode" class="form-control">
            <option value="easy">Fácil</option>
            <option value="medium" selected>Medio</option>
            <option value="hard">Difícil</option>
          </select>
        </div>
        <div class="form-group col-md-4">
          <label for="environmentType">Tipo de entorno:</label>
          <select id="environmentType" name="environmentType" class="form-control">
            <option value="jungle" selected>Jungla</option>
            <option value="desert">Desierto</option>
            <option value="snow">Otro</option>
          </select>
        </div>
        <div class="form-group col-md-4">
          <button type="button" id="createEnvironmentButton" class="btn btn-primary btn-block">Crear Nuevo Entorno</button>
        </div>
      </div>
    </form>
        <!-- Spinner de carga -->
      <div id="loadingSpinner" class="d-none">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
  </div>
  <!-- Agregar referencia a P5.js -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js"></script>
  <!-- Agregar referencia a Bootstrap -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <script>
    let environmentData;
      function showLoadingSpinner() {
        loadingSpinner.classList.remove('d-none');
      }

      // Agrega esta función para ocultar el spinner de carga
      function hideLoadingSpinner() {
        loadingSpinner.classList.add('d-none');
      }

    function setup() {
      createCanvas(1000, 600);
      //fetchEnvironmentData();
      noLoop(); // Evita que draw se ejecute automáticamente
      showLoadingSpinner(); // Muestra el spinner de carga

      // Carga los datos del entorno y luego dibuja el canvas
      fetchEnvironmentData().then(() => {
        hideLoadingSpinner(); // Oculta el spinner de carga
        redraw(); // Vuelve a dibujar el canvas con los datos cargados
      });

    }

    async function fetchEnvironmentData() {
      const response = await fetch('/api/environment/full');
      const data = await response.json();
      environmentData = data.environment.data;
      environmentType = data.environment.environmentType;
    }

    function draw() {
        background(220);

        if (environmentData) {
        const rows = 3; // Number of rows
        const cols = Math.ceil(environmentData.length / rows); // Number of columns

        const elementSize = 40;
        const paddingX = (width - cols * elementSize) / (cols - 1 );
        const paddingY = (height - rows * elementSize) / (rows + 1);

        let index = 0;
        // Set canvas background color based on environmentType
        if (environmentType === 'jungle') {
              background(97, 194, 86); // Green color for jungle environment
            } else if (environmentType === 'desert') {
              background(255, 228, 181); // Peach color for desert environment
            } else {
              background(220); // Default background color
            }

        for (let row = 0; row < rows; row++) {
          for (let col = 0; col < cols; col++) {
            if (index < environmentData.length) {
              const x = paddingX * (col + 1) + col * elementSize;
              const y = paddingY * (row + 1) + row * elementSize;
              drawElement(x, y, environmentData[index]);
              index++;
            }
          }
        }
      }
    }

    function drawElement(x, y, element) {
          fill(255);
          if (element.type === 'enemy') {
            fill(255, 0, 0); // Red color for enemies
          } else if (element.type === 'food') {
            fill(0, 255, 0); // Green color for food
          }

          ellipse(x, y, 40, 40); // Draw a simple circle for each element
          textAlign(CENTER, CENTER);
          fill(0);
          text(element.name, x, y + 30); // Display the name below the circle
      }
  </script>
  
  <script>
    const createEnvironmentForm = document.getElementById('createEnvironmentForm');
    const createEnvironmentButton = document.getElementById('createEnvironmentButton');
    const loadingSpinner = document.getElementById('loadingSpinner');

    createEnvironmentButton.addEventListener('click', async (event) => {
      event.preventDefault();
      const eMode = createEnvironmentForm.elements.eMode.value;
      const environmentType = createEnvironmentForm.elements.environmentType.value;

        // Mostrar el spinner de carga
      loadingSpinner.classList.remove('d-none');
      const response = await fetch('/api/environment/new', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ eMode, environmentType }),
      });

      const data = await response.json();
      console.log(data);

      // Recargar la página para refrescar el canvas
      location.reload();
      // Ocultar el spinner de carga
      loadingSpinner.classList.add('d-none');
      
    });
  </script>
</body>
</html>
