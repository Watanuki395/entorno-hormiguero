<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Entorno</title>
  <style>
    body {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      background: linear-gradient(135deg, #e2e0d5d7 0%, #a6a295d7 25%, #b2954cd7 50%, #9e8034d7 75%, #5a440c8e 100%);
      background-size: 200% 200%;
      animation: gradientAnimation 10s infinite;
    }
    @keyframes gradientAnimation {
      0%, 100% {
        background-position: 0% 50%;
      }
      25% {
        background-position: 50% 0%;
      }
      75% {
        background-position: 50% 100%;
      }
    }
    canvas {
      border: 2px solid black;
    }
    .form-colunm{
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }
      /* Estilos para el spinner de carga */
    .spinner-border {
      display: inline-block;
      width: 2rem;
      height: 2rem;
      vertical-align: text-bottom;
      border: .25em solid currentColor;
      border-right: .25em solid transparent;
      border-radius: 50%;
      -webkit-animation: spinner-border .75s linear infinite;
      animation: spinner-border .75s linear infinite;
    }

    @keyframes spinner-border {
      to {
        transform: rotate(360deg);
      }
    }

    .visually-hidden {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border: 0;
    }
    #loadingSpinner {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: rgba(155, 143, 143, 0.36);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
  }
  .btn-danger {
      background-color: #dc3545;
      border-color: #dc3545;
    }
  .buttons-row{
    display: flex;
    flex-direction: row;
    gap: 1rem;
    padding-bottom: 1rem;
  }
  .form-options{
    display: grid;
    grid-template-columns: 1fr;
    justify-items: center;
    align-items: center;
    justify-content: space-between;
    align-content: flex-end;
  }
  </style>
</head>
<body>
  <div class="container">
    <h1 class="display-4 text-center mb-4">Entorno del Hormiguero</h1>

    <!-- Formulario con estilos de Bootstrap -->
    <form id="createEnvironmentForm">
      <div class="form-options">
        <div class="form-group col-md-4">
          <label for="eMode">Modo:</label>
          <select id="eMode" name="eMode" class="form-control">
            <option value="" disabled selected>Selecciona la dificultad</option>
            <option value="easy">Fácil</option>
            <option value="medium">Medio</option>
            <option value="hard">Difícil</option>
          </select>
        </div>
        <div class="form-group col-md-4">
          <label for="environmentType">Tipo de entorno:</label>
          <select id="environmentType" name="environmentType" class="form-control">
            <option value="" disabled selected>Selecciona el tipo de entorno</option>
            <option value="jungle">Jungla</option>
            <option value="desert">Desierto</option>
            <option value="snow">Nieve</option>
          </select>
        </div>
        <div class="buttons-row">
          <button type="button" id="createEnvironmentButton" class="btn btn-primary">Crear Nuevo Entorno</button>
          <button type="button" id="deleteEnvironmentButton" class="btn btn-danger">Desactivar Entorno</button>
        </div>
      </div>
    </form>
        <!-- Spinner de carga -->
      <div id="loadingSpinner" class="d-none">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
  </div>
  <!-- Modal de confirmación de borrado -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" role="dialog" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteConfirmationModalLabel">Confirmación de desactivación</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        ¿Estás seguro de que quieres desactivar la partida de este entorno?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Regresar</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteButton">Desactivar</button>
      </div>
    </div>
  </div>
</div>
<div id="alertContainer" class="alert-container"></div>
  <!-- Agregar referencia a P5.js -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js"></script>
  <!-- Agregar referencia a Bootstrap -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Agregamos socked.io-->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
  <script>
    const socket = io("http://localhost:8080/"); 

    class Ant {
        constructor(x, y) {
          this.x = x;
          this.y = y;
          this.speedX = random(-1, 1);
          this.speedY = random(-1, 1);
          this.color = color(130, 0, 0);
        }

        update() {
          this.x += this.speedX;
          this.y += this.speedY;

          if (this.x < 0 || this.x > width) {
            this.speedX *= -1;
          }

          if (this.y < 0 || this.y > height) {
            this.speedY *= -1;
          }
        }

        display() {
          // Cuerpo de la hormiga
            fill(this.color); 
            ellipse(this.x, this.y, 10, 10); // Cuerpo redondeado

            // Cabeza de la hormiga
            ellipse(this.x + 5, this.y - 5, 6, 6); // Cabeza redondeada

            // Patas de la hormiga
            stroke(0); // Color negro para las patas
            line(this.x - 2, this.y + 2, this.x - 5, this.y + 5); // Pata izquierda delantera
            line(this.x + 2, this.y + 2, this.x + 5, this.y + 5); // Pata derecha delantera
            line(this.x - 2, this.y + 5, this.x - 5, this.y + 8); // Pata izquierda trasera
            line(this.x + 2, this.y + 5, this.x + 5, this.y + 8); // Pata derecha trasera

            // Ojos de la hormiga
            fill(255); // Color blanco
            ellipse(this.x + 3, this.y - 7, 2, 2); // Ojo derecho
            ellipse(this.x + 6, this.y - 7, 2, 2); // Ojo izquierdo
        }
      }
      
      let environmentData;
      let environmentType;
      let ants = [];

      function showLoadingSpinner() {
        loadingSpinner.classList.remove('d-none');
      }

      // Agrega esta función para ocultar el spinner de carga
      function hideLoadingSpinner() {
        loadingSpinner.classList.add('d-none');
      }

      function setup() {
        createCanvas(1000, 600);

         // Inicializa un grupo de hormigas
          for (let i = 0; i < 20; i++) {
            ants.push(new Ant(random(width), random(height)));
          }
        //fetchEnvironmentData();
        //noLoop(); // Evita que draw se ejecute automáticamente
        showLoadingSpinner(); // Muestra el spinner de carga

        // Carga los datos del entorno y luego dibuja el canvas
        fetchEnvironmentData().then(() => {
          hideLoadingSpinner(); // Oculta el spinner de carga
          //redraw(); // Vuelve a dibujar el canvas con los datos cargados
        }).catch((error)=>{
          console.log(`No existe un entorno activo: ${error}`);
          hideLoadingSpinner(); // Oculta el spinner de carga
          //redraw(); // Vuelve a dibujar el canvas con los datos cargados
        });

      }

      async function fetchEnvironmentData() {
        const response = await fetch('/api/environment/full');
        const data = await response.json();
        if(data){
          environmentData = data.environment.data;
          environmentType = data.environment.environmentType;
        }
      }

      function draw() {
        background(220);
        if (!environmentData) {
          for (let ant of ants) {
            ant.update();
            ant.display();
          }
        } else {
          drawEnvironment();
        }
      }

      function drawEnvironment() {
          const rows = 3; // Number of rows
          const cols = Math.ceil(environmentData.length / rows); // Number of columns

          const elementSize = 40;
          const paddingX = (width - cols * elementSize) / (cols - 1);
          const paddingY = (height - rows * elementSize) / (rows + 1);

          let index = 0;

          // Set canvas background color based on environmentType
          if (environmentType === 'jungle') {
            background(97, 194, 86); // Green color for jungle environment
          } else if (environmentType === 'desert') {
            background(255, 228, 181); // Peach color for desert environment
          } else if (environmentType === 'snow') {
            background(220); // Default background color
          }

          for (let row = 0; row < rows; row++) {
            for (let col = 0; col < cols; col++) {
              if (index < environmentData.length) {
                const x = paddingX * (col + 1) + col * elementSize;
                const y = paddingY * (row + 1) + row * elementSize;
                drawElement(x, y, environmentData[index]);
                index++;
              }
            }
          }
        }

      function drawElement(x, y, element) {
            fill(255);
            if (element.type === 'enemy' && !element.completed) {
              fill(128, 0, 0); // Red color for enemies
            } else if (element.type === 'food' && !element.completed) {
              fill(0, 128, 0); // Green color for food
            }
            if(!element.completed && element.assigned){fill(243, 156, 18); } //Orange for Assigned elements
            if(element.completed && element.assigned){fill(192, 192, 192); } // Grey for completed elements, it means it is recollected or defeated

            ellipse(x, y, 40, 40); // Draw a simple circle for each element
            textAlign(CENTER, CENTER);
            fill(0);
            text(element.name, x, y + 30); // Display the name below the circle
        }
    
      socket.on('update', (data) => {
        console.log('Se ha recibido una actualización:', data);
        
          // Redibujar el canvas llamando a la función redraw()
          setup()
      });
  </script>
  
  <script>
    const createEnvironmentForm = document.getElementById('createEnvironmentForm');
    const createEnvironmentButton = document.getElementById('createEnvironmentButton');
    const alertContainer = document.getElementById('alertContainer');
    
    createEnvironmentButton.addEventListener('click', async (event) => {
      event.preventDefault();
      const eMode = createEnvironmentForm.elements.eMode.value;
      const environmentType = createEnvironmentForm.elements.environmentType.value;


        // Validar si se seleccionaron opciones
        if (!eMode || !environmentType) {
          const alertHTML = `
              <div class="alert alert-danger alert-dismissible fade show" role="alert">
                Por favor, selecciona las opciones de configuración del entorno.
                <button type="button" class="close" data-dismiss="alert" aria-label="Close" id="closeAlert">
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>
            `;
            alertContainer.innerHTML = alertHTML;

            const closeAlertButton = document.getElementById('closeAlert');
              closeAlertButton.addEventListener('click', () => {
                alertContainer.innerHTML = ''; 
              });
            
          return;
        }

        // Mostrar el spinner de carga
        showLoadingSpinner();
      const response = await fetch('/api/environment/new', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ eMode, environmentType }),
      });

      const data = await response.json();
      //console.log(data);

      // Recargar la página para refrescar el canvas
      if(data.created){
        location.reload();
      }else{
        const alertHTML = `
              <div class="alert alert-danger alert-dismissible fade show" role="alert">
                ${data.message}
                <button type="button" class="close" data-dismiss="alert" aria-label="Close" id="closeAlert">
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>
            `;
            alertContainer.innerHTML = alertHTML;

            const closeAlertButton = document.getElementById('closeAlert');
              closeAlertButton.addEventListener('click', () => {
                alertContainer.innerHTML = ''; 
              });
            
      }

      // Ocultar el spinner de carga
      hideLoadingSpinner();
      
    });

    const deleteEnvironmentButton = document.getElementById('deleteEnvironmentButton');
    const confirmDeleteButton = document.getElementById('confirmDeleteButton');

    deleteEnvironmentButton.addEventListener('click', () => {
      const deleteConfirmationModal = document.getElementById('deleteConfirmationModal');
      deleteConfirmationModal.classList.add('show');
      deleteConfirmationModal.style.display = 'block';
    });

confirmDeleteButton.addEventListener('click', async () => {
  const deleteConfirmationModal = document.getElementById('deleteConfirmationModal');
  deleteConfirmationModal.style.display = 'none';

  showLoadingSpinner();
  
  const response = await fetch('/api/environment/deactivate-environment', {
    method: 'PUT'
  });

  const data = await response.json();
  console.log(data);

  // Recargar la página para refrescar el canvas
  location.reload();
  hideLoadingSpinner();
});

document.addEventListener('DOMContentLoaded', () => {
  const modalDismissButtons = document.querySelectorAll('[data-dismiss="modal"]');
  modalDismissButtons.forEach(button => {
    button.addEventListener('click', () => {
      const modal = button.closest('.modal');
      modal.style.display = 'none';
    });
  });
});


  </script>
</body>
</html>
